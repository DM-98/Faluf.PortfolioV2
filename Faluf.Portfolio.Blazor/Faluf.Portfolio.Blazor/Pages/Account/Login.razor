@page "/account/login"
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.DataProtection

@attribute [ExcludeFromInteractiveRouting]

@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@inject IDataProtectionProvider DataProtectionProvider

<PageTitle>@Localizer["Login"]</PageTitle>

<h3>@Localizer["Login"]</h3>

<EditForm Model="@LoginInputModel" OnValidSubmit="LoginAsync" FormName="LoginForm">
    <FluentValidationValidator />

    <!-- Email -->
    <div class="mb-3">
        <label for="email" class="form-label">@Localizer["Email"]:</label>
        <InputText id="email" @bind-Value="@LoginInputModel.Email" class="form-control" />
        <ValidationMessage For="@(() => LoginInputModel.Email)" class="text-danger" />
    </div>

    <!-- Password -->
    <div class="mb-3">
        <label for="password" class="form-label">@Localizer["Password"]:</label>
        <InputText id="password" type="password" @bind-Value="@LoginInputModel.Password" class="form-control" />
        <ValidationMessage For="@(() => LoginInputModel.Password)" class="text-danger" />
    </div>

    <!-- Stay logged in -->
    <div class="form-check mb-3">
        <InputCheckbox id="rememberMe" class="form-check-input" @bind-Value="@LoginInputModel.IsPersistent" />
        <label class="form-check-label" for="rememberMe">@Localizer["StayLoggedIn"]</label>
    </div>

    <!-- Login -->
    <div class="mb-3">
        <button type="submit" class="btn btn-primary btn-block">@Localizer["Login"]</button>
    </div>

    @if (!string.IsNullOrWhiteSpace(ErrorMessage))
    {
        <div class="alert alert-danger mt-3" role="alert">
            @((MarkupString)ErrorMessage)
        </div>
    }
</EditForm>

@code {
    [CascadingParameter]
    public HttpContext HttpContext { get; set; } = default!;

    [Parameter, SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    [SupplyParameterFromForm(FormName = "LoginForm")]
    private LoginInputModel LoginInputModel { get; set; } = new()
    {
        Email = "test@test.com",
        Password = "Test123!",
        ClientType = ClientType.Web
    };

    private async Task LoginAsync()
    {
        Result<TokenDTO> loginResult = await AuthService.LoginAsync(LoginInputModel, CancellationToken);

        if (!loginResult.IsSuccess)
        {
            SetErrorMessage(loginResult);

            return;
        }

		IEnumerable<Claim> claims = new JwtSecurityTokenHandler().ReadJwtToken(loginResult.Content.AccessToken).Claims;
        ClaimsPrincipal claimsPrincipal = new(new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme));
		AuthenticationProperties authenticationProperties = new() { IsPersistent = LoginInputModel.IsPersistent };

        await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, claimsPrincipal, authenticationProperties);

		HttpContext.User = claimsPrincipal;

        NavigationManager.NavigateTo(!string.IsNullOrWhiteSpace(ReturnUrl) ? ReturnUrl : "/");
    }
}