@inherits LayoutComponentBase

@implements IDisposable

@inject IStringLocalizer<MainLayout> Localizer
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration

<SerilogErrorBoundary @ref="errorBoundary">
	<ChildContent>
		<p>Rendermode: @RendererInfo.Name</p>
		<p>Is interactive: @RendererInfo.IsInteractive</p>

		@Body
	</ChildContent>

	<ErrorContent>
		<h1>Oops!</h1>

		<p>@Localizer["ErrorOccurredInApplication", context.HelpLink ?? string.Empty].</p>

		<button class="btn btn-primary" @onclick="errorBoundary.Recover">
			@Localizer["Recover"]
		</button>
	</ErrorContent>
</SerilogErrorBoundary>

@code {
	[CascadingParameter]
	private Task<AuthenticationState> AuthenticationStateTask { get; set; } = default!;

	private ErrorBoundary errorBoundary = null!;
	private PeriodicTimer? timer;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			timer ??= new PeriodicTimer(TimeSpan.FromMinutes(long.Parse(Configuration["RevalidationIntervalInMinutes"]!)));

			while (await timer.WaitForNextTickAsync() && (await AuthenticationStateTask).User.Identity is { IsAuthenticated: true })
			{
				Result<TokenDTO> result = await AuthService.RefreshTokensAsync();

				if (!result.IsSuccess)
				{
					timer.Dispose();

					NavigationManager.Refresh(forceReload: true);
				}

				await InvokeAsync(StateHasChanged);
			}
		}
	}

	public void Dispose()
	{
		timer?.Dispose();
	}
}